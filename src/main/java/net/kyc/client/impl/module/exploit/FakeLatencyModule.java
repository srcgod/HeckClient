package net.kyc.client.impl.module.exploit;

import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.common.ResourcePackStatusC2SPacket;
import net.kyc.client.api.config.Config;
import net.kyc.client.api.config.setting.BooleanConfig;
import net.kyc.client.api.config.setting.NumberConfig;
import net.kyc.client.api.event.listener.EventListener;
import net.kyc.client.api.module.ModuleCategory;
import net.kyc.client.api.module.ToggleModule;
import net.kyc.client.impl.event.RunTickEvent;
import net.kyc.client.impl.event.network.PacketEvent;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * @author linus
 * @since 1.0
 */
public class FakeLatencyModule extends ToggleModule {

    //
    Config<Float> latencyConfig = new NumberConfig<>("Latency", "Delay in ms to add to the client ping", 10.0f, 100.0f, 500.0f);
    Config<Boolean> transactionsConfig = new BooleanConfig("Transactions", "Handle server transaction packets", false);
    //
    private final ConcurrentMap<Packet<?>, Long> cachedPackets =
            new ConcurrentHashMap<>();

    /**
     *
     */
    public FakeLatencyModule() {
        super("FakeLatency", "Spoofs packet delays to make it appear to the " +
                "server that you have a higher latency", ModuleCategory.EXPLOITS);
    }

    /**
     *
     */
    @Override
    public void onDisable() {
        if (mc.player == null) {
            return;
        }
        if (!cachedPackets.isEmpty()) {
            cachedPackets.forEach((packet, time) ->
                    mc.player.networkHandler.sendPacket(packet));
            cachedPackets.clear();
        }
    }

    @Override
    public void onUpdate() {

    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event) {
        if (mc.player == null) {
            return;
        }
        if (!mc.isInSingleplayer()) {
            if (event.getPacket() instanceof KeepAliveC2SPacket
                    || ((event.getPacket() instanceof ResourcePackStatusC2SPacket
                    || event.getPacket() instanceof CommonPongC2SPacket) && transactionsConfig.getValue())) {
                if (cachedPackets.containsKey(event.getPacket())) {
                    cachedPackets.remove(event.getPacket());
                    return;
                }
                cachedPackets.put(event.getPacket(), System.currentTimeMillis());
                event.cancel();
            }
        }
    }

    @EventListener
    public void onTick(RunTickEvent event) {
        //
        cachedPackets.forEach((packet, time) ->
        {
            long elapsed = System.currentTimeMillis() - time;
            if (elapsed > latencyConfig.getValue()) {
                mc.player.networkHandler.sendPacket(packet);
                cachedPackets.remove(packet);
            }
        });
    }
}

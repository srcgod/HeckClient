package net.kyc.client.impl.module.exploit;

import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.kyc.client.api.config.Config;
import net.kyc.client.api.config.setting.BooleanConfig;
import net.kyc.client.api.config.setting.NumberConfig;
import net.kyc.client.api.event.listener.EventListener;
import net.kyc.client.api.module.ModuleCategory;
import net.kyc.client.api.module.ToggleModule;
import net.kyc.client.impl.event.network.PacketEvent;
import net.kyc.client.init.Managers;
import net.kyc.client.util.math.timer.CacheTimer;
import net.kyc.client.util.math.timer.Timer;

import java.text.DecimalFormat;

/**
 * @author linus
 * @since 1.0
 */
public class FastProjectileModule extends ToggleModule {

    //
    Config<Float> chargeConfig = new NumberConfig<>("Charge", "Time to charge after applying fast projectiles", 1.0f, 2.0f, 5.0f);
    Config<Boolean> arrowConfig = new BooleanConfig("Arrow", "Applies to arrows shot from a bow", true);
    Config<Boolean> potionConfig = new BooleanConfig("Potion", "Applies to splash/lingering potions", false);
    Config<Boolean> pearlConfig = new BooleanConfig("EnderPearl", "Applies to ender pearls", false);
    Config<Boolean> snowballConfig = new BooleanConfig("Snowball", "Applies to snowball", false);
    Config<Boolean> eggConfig = new BooleanConfig("Egg", "Applies to eggs", false);
    Config<Boolean> tridentConfig = new BooleanConfig("Trident", "Applies to thrown tridents", false);
    //
    private final Timer chargeTimer = new CacheTimer();

    /**
     *
     */
    public FastProjectileModule() {
        super("FastProjectile", "Allows projectiles to travel at absurd speeds",
                ModuleCategory.EXPLOITS);
    }

    @Override
    public String getModuleData() {
        if (chargeTimer.passed(chargeConfig.getValue() * 1000.0f)) {
            return "Charged";
        }
        DecimalFormat decimal = new DecimalFormat("0.0");
        return decimal.format((2000.0f - chargeTimer.getElapsedTime()) / 1000.0f) + "s";
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event) {
        if (mc.player == null) {
            return;
        }
        if (!chargeTimer.passed(chargeConfig.getValue() * 1000.0f)) {
            return;
        }
        if (event.getPacket() instanceof PlayerInteractItemC2SPacket packet) {
            ItemStack stack = mc.player.getStackInHand(packet.getHand());
            if ((stack.getItem() == Items.SPLASH_POTION
                    || stack.getItem() == Items.LINGERING_POTION) && potionConfig.getValue()
                    || stack.getItem() == Items.ENDER_PEARL && pearlConfig.getValue()
                    || stack.getItem() == Items.SNOWBALL && snowballConfig.getValue()
                    || stack.getItem() == Items.EGG && eggConfig.getValue()) {
                chargeTimer.reset();
                spoofProjectileVelocity();
            }
        } else if (event.getPacket() instanceof PlayerActionC2SPacket packet
                && packet.getAction() == PlayerActionC2SPacket.Action.RELEASE_USE_ITEM) {
            ItemStack stack = mc.player.getMainHandStack();
            if (stack.getItem() == Items.BOW && arrowConfig.getValue()) {
                chargeTimer.reset();
                spoofProjectileVelocity();
            }
        }
    }

    private void spoofProjectileVelocity() {
        double x = mc.player.getX();
        double y = mc.player.getY();
        double z = mc.player.getZ();
        Managers.NETWORK.sendPacket(new ClientCommandC2SPacket(mc.player,
                ClientCommandC2SPacket.Mode.START_SPRINTING));
        for (int i = 0; i < 100; i++) {
            Managers.NETWORK.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(x,
                    y - 1e-10, z, true));
            Managers.NETWORK.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(x,
                    y + 1e-10, z, false));
        }
    }

    @Override
    public void onUpdate() {

    }
}
